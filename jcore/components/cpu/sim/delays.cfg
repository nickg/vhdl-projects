; Specify delays for reading and writing certain memory address. Blank
; lines and everything after a ';' is ignored. Non-blank lines are
; rules specifying delays for memory access to specific addresses.

; Each rule line should be in this form:
; ADDRESSES READ_ACK_DELAY READ_ACK_DROP_DELAY [WRITE_ACK_DELAY WRITE_ACK_DROP_DELAY]

; The *_DELAY values are base 10 numbers specifying the number of
; nanoseconds to delay. If the WRITE_* delays aren't set, then the
; READ_* delays are used for both read and write.

; The ADDRESSES field can be one of two forms. Either it is an
; inclusive range of addresses "START-END" or it is a bit mask
; followed by a value to match against "MASK MATCH". During address
; matching the test is ((addr & MASK) == (MASK & MATCH)) where "&" is
; a bit-wise AND operator. All of the fields in ADDRESSES are base 16
; numbers.

; When an address is considered, each rule is tested in the order they
; appear in the file. The first matching rule is used. These means if
; you want a more general rule it should probably be at the end of the
; file.

; Examples:

; This rule matches addresses in the range [0x10000000-0x10FFFFFF] and
; delays ACK raising by 160 ns and lowers ACK after 4 ns.
;
; FF000000 10000000 160 4

; This rule does the same as above but uses the range syntax.
;
; 10000000-10FFFFFF 160 4

; This rule sets different delays for reads and writes for addresses
; in the range [0x1000-0x1FFF].
;
; 1000-1FFF 20 4 60 4

FF000000 10000000 160 4
