-- ******************************************************************
-- ******************************************************************
-- This file is generated by soc_gen and will be overwritten next time
-- the tool is run. See soc_top/README for information on running soc_gen.
-- ******************************************************************
-- ******************************************************************
-- ******************************************************************
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
use work.cpu2j0_pack.all;
use work.aic2_pack.all;
use work.misc_pack.all;
use work.cache_pack.all;
use work.data_bus_pack.all;









entity aic2_slave_process is
        generic ( c_busperiod : integer := 40;
        cpuid       : integer :=  0;
        cache_exist : integer :=  1;
        busperiod_integer_ns : boolean := true;
        busperiodni_numer : integer := 80;
        busperiodni_denom : integer :=  7;
        IRQ_SI0_NUM : integer :=  97;
        IRQ_SI1_NUM : integer := ( 78 + 1);
        IRQ_SI2_NUM : integer := ( 78 + 2);
        IRQ_SI3_NUM : integer := ( 78 + 3);
        IRQ_SI4_NUM : integer := ( 78 + 4);
        IRQ_SI5_NUM : integer := ( 78 + 5);
        IRQ_SI6_NUM : integer := ( 78 + 6);
        IRQ_SI7_NUM : integer := ( 78 + 7);
        IRQ_II0_NUM : integer :=  76
        );
        port ( 
        clk_sys     : in  std_logic;
      clk_0_5x : in std_logic;
        rst_i       : in  std_logic;
        db_i        : in  cpu_data_o_t;
        db_o        : out cpu_data_i_t;
        rtc_sec     : out std_logic_vector( 63 downto 0);    
        rtc_nsec    : out std_logic_vector( 31 downto 0);
        irq_grp_i   : in  irq_a_t;
        irq_s_i     : in  std_logic_vector(  7 downto 0) := (others => '0');
        enmi_i      : in  std_logic;
        event_i : in cpu_event_o_t;
        event_o : out cpu_event_i_t;
        cpa       : in  cop_o_t;
        cpy       : out cop_i_t;
        cacheb_ctrl_ic : out cache_ctrl_t;
        cacheb_ctrl_dc : out cache_ctrl_t;
        aic_com_o : out aiccom_io_t;
        aic_com_i : in  aiccom_io_t;
        db_cctrans_o : in tracpu_data_o_t; 
        cpu1eni   : out std_logic;
        reboot    : out std_logic
        );
end entity;

architecture bytebus of aic2_slave_process is
  signal db_word_o : cpu_data_o_t;
  signal db_word_i : cpu_data_i_t;
begin
    aic0 : entity work.aic2(behav)
        generic map (
            c_busperiod => c_busperiod ,
            cpuid => cpuid ,
            cache_exist => cache_exist ,
            busperiod_integer_ns => busperiod_integer_ns ,
            busperiodni_numer => busperiodni_numer ,
            busperiodni_denom => busperiodni_denom ,
            IRQ_SI0_NUM => IRQ_SI0_NUM ,
            IRQ_SI1_NUM => IRQ_SI1_NUM ,
            IRQ_SI2_NUM => IRQ_SI2_NUM ,
            IRQ_SI3_NUM => IRQ_SI3_NUM ,
            IRQ_SI4_NUM => IRQ_SI4_NUM ,
            IRQ_SI5_NUM => IRQ_SI5_NUM ,
            IRQ_SI6_NUM => IRQ_SI6_NUM ,
            IRQ_SI7_NUM => IRQ_SI7_NUM ,
            IRQ_II0_NUM => IRQ_II0_NUM
        )
        port map (
            clk_sys => clk_sys ,
            rst_i => rst_i ,
            db_i => db_word_o ,
            db_o => db_word_i ,
            rtc_sec => rtc_sec ,
            rtc_nsec => rtc_nsec ,
            irq_grp_i => irq_grp_i ,
            irq_s_i => irq_s_i ,
            enmi_i => enmi_i ,
            event_i => event_i ,
            event_o => event_o ,
            cpa => cpa ,
            cpy => cpy ,
            cacheb_ctrl_ic => cacheb_ctrl_ic ,
            cacheb_ctrl_dc => cacheb_ctrl_dc ,
            aic_com_o => aic_com_o ,
            aic_com_i => aic_com_i ,
            db_cctrans_o => db_cctrans_o ,
            cpu1eni => cpu1eni ,
            reboot => reboot
        );

   slave_adapter : entity work.bussizesa(rtl)
        port map (
            rst => rst_i ,
            clk => clk_sys ,
            clk_half => clk_0_5x,
            db_a_o => db_i ,
            db_a_i => db_o ,
            db_b_o => db_word_o,
            db_b_i => db_word_i
        );
end bytebus;
